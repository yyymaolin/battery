{"remainingRequest":"D:\\Desktop\\Django\\fe_admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Desktop\\Django\\fe_admin\\src\\views\\monitor\\service\\index.vue?vue&type=style&index=0&id=4c2ba5d9&lang=scss&scoped=true","dependencies":[{"path":"D:\\Desktop\\Django\\fe_admin\\src\\views\\monitor\\service\\index.vue","mtime":1695288475460},{"path":"D:\\Desktop\\Django\\fe_admin\\node_modules\\css-loader\\dist\\cjs.js","mtime":1698226179238},{"path":"D:\\Desktop\\Django\\fe_admin\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1698226187603},{"path":"D:\\Desktop\\Django\\fe_admin\\node_modules\\postcss-loader\\src\\index.js","mtime":1698226179476},{"path":"D:\\Desktop\\Django\\fe_admin\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1698226183222},{"path":"D:\\Desktop\\Django\\fe_admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1698226179476},{"path":"D:\\Desktop\\Django\\fe_admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1698226183228}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiA6OnYtZGVlcCAuYm94LWNhcmQgewogICAgbWFyZ2luLWJvdHRvbTogNXB4OwogICAgc3BhbiB7CiAgICAgIG1hcmdpbi1yaWdodDogNDBweDsKICAgIH0KICB9Ci50aXRsZSB7CiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICBtYXJnaW46IDEwcHggMAogIH0KLmVjaGFydHN7CiAgICB3aWR0aDogMTAwJTsKICAgIG1pbi13aWR0aDogNDAwcHg7Cn0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0PA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/monitor/service","sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n    <el-row>\r\n      <el-col>\r\n        <el-card class=\"box-card\">\r\n          <svg-icon icon-class=\"system\" style=\"margin-right: 5px\" />\r\n          <span>\r\n            系统：{{ service.platform }}\r\n          </span>\r\n          <span>\r\n            IP：{{ service.ip }}\r\n          </span>\r\n          <span v-if=\"service_data.time.date\">\r\n            系统时间: {{ service_data.time.date }} {{ service_data.time.time }}\r\n          </span>\r\n          <span>\r\n            项目已不间断运行：{{ service_data.sys.run_time }}\r\n          </span>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n    <el-row>\r\n      <el-card class=\"box-card\">\r\n        <div slot=\"header\" class=\"clearfix\">\r\n          <span style=\"font-weight: bold;color: #666;font-size: 18px\">状态</span>\r\n        </div>\r\n        <el-col :span=\"8\">\r\n          <div class=\"title\">CPU使用率</div>\r\n          <div class=\"title\">\r\n            <el-progress type=\"circle\" :percentage=\"service_data.cpu.percent\" />\r\n          </div>\r\n          <div class=\"title\">{{ service_data.cpu.count }}</div>\r\n        </el-col>\r\n        <el-col :span=\"8\">\r\n          <div class=\"title\">内存使用率</div>\r\n          <div class=\"title\">\r\n            <el-progress type=\"circle\" :percentage=\"service_data.mem.percent\" />\r\n          </div>\r\n          <div v-if=\"service_data.mem.used\" class=\"title\">{{ service_data.mem.used }} / {{ service_data.mem.total }}</div>\r\n        </el-col>\r\n        <el-col :span=\"8\">\r\n          <div class=\"title\">磁盘使用率</div>\r\n          <div class=\"title\">\r\n            <el-progress type=\"circle\" :percentage=\"service_data.disk.percent\" />\r\n          </div>\r\n          <div v-if=\"service_data.disk.used\" class=\"title\">{{ service_data.disk.used }} / {{ service_data.disk.total }}</div>\r\n        </el-col>\r\n      </el-card>\r\n    </el-row>\r\n    <el-row :gutter=\"5\">\r\n      <el-col :span=\"12\">\r\n        <el-card class=\"box-card\">\r\n          <div slot=\"header\" class=\"clearfix\">\r\n            <span style=\"font-weight: bold;color: #666;font-size: 18px\">CPU使用率监控</span>\r\n          </div>\r\n          <v-chart ref=\"cpuLine\" :options=\"cpuInfo\" />\r\n        </el-card>\r\n      </el-col>\r\n      <el-col :span=\"12\">\r\n        <el-card class=\"box-card\">\r\n          <div slot=\"header\" class=\"clearfix\">\r\n            <span style=\"font-weight: bold;color: #666;font-size: 18px\">内存使用率监控</span>\r\n          </div>\r\n          <div style=\"width: 100%\">\r\n            <v-chart ref=\"memLine\" :options=\"memInfo\" />\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n  </div>\r\n</template>\r\n<script>\r\nimport ECharts from 'vue-echarts'\r\nimport 'echarts-gl'\r\nimport 'echarts/lib/chart/bar'\r\nimport 'echarts/lib/component/tooltip'\r\nimport { getToken } from '@/utils/auth'\r\nimport { getService } from '@/api/monitor/service'\r\nexport default {\r\n  name: 'Service',\r\n  components: { 'v-chart': ECharts },\r\n  data() {\r\n    return {\r\n      websock: null,\r\n      monitor: null, // 监控定时器\r\n      service: {\r\n        'platform': '',\r\n        'ip': ''\r\n      },\r\n      service_data: {\r\n        'cpu': {\r\n          'percent': 0,\r\n          'count': ''\r\n        },\r\n        'mem': {\r\n          'percent': 0,\r\n          'total': '',\r\n          'free': '',\r\n          'used': ''\r\n        },\r\n        'disk': {\r\n          'percent': 0,\r\n          'total': '',\r\n          'free': '',\r\n          'used': ''\r\n        },\r\n        'sys': {\r\n          'run_time': ''\r\n        },\r\n        'time': {\r\n          'date': '',\r\n          'time': ''\r\n        }\r\n      },\r\n      cpuInfo: {\r\n        tooltip: {\r\n          trigger: 'axis'\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          boundaryGap: false,\r\n          data: []\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          min: 0,\r\n          max: 100,\r\n          interval: 20\r\n        },\r\n        series: [{\r\n          data: [],\r\n          type: 'line',\r\n          areaStyle: {\r\n            normal: {\r\n              color: 'rgb(32, 160, 255)' // 改变区域颜色\r\n            }\r\n          },\r\n          itemStyle: {\r\n            normal: {\r\n              color: '#6fbae1',\r\n              lineStyle: {\r\n                color: '#6fbae1' // 改变折线颜色\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      memInfo: {\r\n        tooltip: {\r\n          trigger: 'axis'\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          boundaryGap: false,\r\n          data: []\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          min: 0,\r\n          max: 100,\r\n          interval: 20\r\n        },\r\n        series: [{\r\n          data: [],\r\n          type: 'line',\r\n          areaStyle: {\r\n            normal: {\r\n              color: 'rgb(32, 160, 255)' // 改变区域颜色\r\n            }\r\n          },\r\n          itemStyle: {\r\n            normal: {\r\n              color: '#6fbae1',\r\n              lineStyle: {\r\n                color: '#6fbae1' // 改变折线颜色\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.initWebSocket()\r\n    this.getService()\r\n  },\r\n  mounted() {\r\n    const cpuLine = this.$refs.cpuLine\r\n    const memLine = this.$refs.memLine\r\n    window.addEventListener('resize', () => {\r\n      cpuLine.resize()\r\n      memLine.resize()\r\n    })\r\n  },\r\n  destroyed() {\r\n    // 清除定时器\r\n    if (this.monitor) {\r\n      clearInterval(this.monitor)\r\n    }\r\n    // 关闭socket\r\n    if (this.websock) {\r\n      this.websock.close()\r\n    }\r\n  },\r\n  methods: {\r\n    getService() {\r\n      getService().then(res => {\r\n        this.service = res.data\r\n      })\r\n    },\r\n    initWebSocket() { // 初始化weosocket\r\n      const wsuri = process.env.VUE_APP_WS_API + '/monitor/service?token=' + getToken()\r\n      this.websock = new WebSocket(wsuri)\r\n      this.websock.onmessage = this.websocketonmessage\r\n      this.websock.onopen = this.websocketonopen\r\n      this.websock.onerror = this.websocketonerror\r\n      this.websock.onclose = this.websocketclose\r\n    },\r\n    websocketonopen() { // 连接建立之后执行send方法发送数据\r\n      const data = { 'tonken': getToken() }\r\n      this.monitor = setInterval(this.websocketsend, 2000, JSON.stringify(data))\r\n    },\r\n    websocketonerror() { // 连接建立失败重连\r\n      this.initWebSocket()\r\n    },\r\n    websocketonmessage(e) { // 数据接收\r\n      const data = JSON.parse(e.data)\r\n      this.service_data = data\r\n      // 添加echarts数据,且最多8个\r\n      if (this.cpuInfo.xAxis.data.length >= 8) {\r\n        this.cpuInfo.xAxis.data.shift()\r\n        this.memInfo.xAxis.data.shift()\r\n        this.cpuInfo.series[0].data.shift()\r\n        this.memInfo.series[0].data.shift()\r\n      }\r\n      this.cpuInfo.xAxis.data.push(data.time.time)\r\n      this.memInfo.xAxis.data.push(data.time.time)\r\n      this.cpuInfo.series[0].data.push(parseFloat(data.cpu.percent))\r\n      this.memInfo.series[0].data.push(parseFloat(data.mem.percent))\r\n    },\r\n    websocketsend(Data) { // 数据发送\r\n      this.websock.send(Data)\r\n    },\r\n    websocketclose(e) { // 关闭\r\n      console.log('断开连接', e)\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n ::v-deep .box-card {\r\n    margin-bottom: 5px;\r\n    span {\r\n      margin-right: 40px;\r\n    }\r\n  }\r\n.title {\r\n    text-align: center;\r\n    margin: 10px 0\r\n  }\r\n.echarts{\r\n    width: 100%;\r\n    min-width: 400px;\r\n}\r\n</style>\r\n"]}]}